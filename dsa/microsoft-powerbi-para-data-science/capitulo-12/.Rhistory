iris
dim(iris)
cls
clear
amostra = sample(c(0,1), 150, replace=TRUE, prob=c(0.5, 0.5))
amostra
install.packages("sampling")
library(sampling)
summar(iris)
summary(iris)
amostrairis = strata(iris, c("Species"), size(25, 25, 25), method = "srswor")
amostrairis = strata(iris, c("Species"), size=c(25, 25, 25), method = "srswor")
summary(amostrairis)
infert
summary(infert)
amostra_infert = strata(infert, c("education"), size=c(round(12 / 248 * 100), round(120 / 248 * 100), round(116 / 248 * 100)), method("srswr"))
amostra_infert = strata(infert, c("education"), size=c(round(12 / 248 * 100), round(120 / 248 * 100), round(116 / 248 * 100)), method("srswor"))
amostra_infert = strata(infert, c("education"), size=c(round(12 / 248 * 100), round(120 / 248 * 100), round(116 / 248 * 100)), method="srswor")
summary(amostra_infert)
install.packages("TeachingSampling")
library("TeachingSampling")
amostra_sist_iris = iris[S.SY(150, 10)]
summary(amostra_sist_iris)
amostra_sist_iris
pos_amostra = S.SY(150, 10)
pos_amostra
amostra_sist_iris = iris[pos_amostra]
amostra_sist_iris
amostra_sist_iris = iris[pos_amostra,]
summary(amostra_sist_iris)
pos_amostra
iris
save(iris)
vnum_sucessos = c(0, 1, 2, 3, 4)
vnum_experimentos = c(4, 4, 4, 4)
vprob = c(0.25, 0.25, 0.25, 0.25)
vpsucessos = dbinom(vnum_sucessos, vnum_experimentos, vprob)
vnum_sucessos = c(0, 1, 2, 3, 4)
vnum_experimentos = c(4, 4, 4, 4)
vprob = c(0.25, 0.25, 0.25, 0.25)
vpsucessos = dbinom(vnum_sucessos, vnum_experimentos, vprob)
vpsucessos
vnum_experimentos = 4
vnum_sucessos = c(0, 1, 2, 3, 4)
vnum_experimentos = 4
vprob = c(0.25, 0.25, 0.25, 0.25)
vpsucessos = dbinom(vnum_sucessos, vnum_experimentos, vprob)
vpsucessos
vnum_sucessos = c(0, 1, 2, 3, 4)
vnum_experimentos = 4
vprob = c(0.30, 0.20, 0.25, 0.25)
vpsucessos = dbinom(vnum_sucessos, vnum_experimentos, vprob)
vpsucessos
vnum_sucessos = c(0, 1, 2, 3, 4)
vnum_experimentos = 4
vprob = 0.25
vpsucessos = dbinom(vnum_sucessos, vnum_experimentos, vprob)
vpsucessos
x = rnorm(100)
qqnorm(x)
x = rnorm(100)
qqnorm(x)
qqline(x)
x = rnorm(100)
qqnorm(x)
qqline(x)
shapiro.test(x)
media_salario = 75
n_amostras = 9
dp = 10
graus_liberdade = n_amostras - 1
pt(1.5, 8)
media_salario = 75
n_amostras = 9
dp = 10
graus_liberdade = n_amostras - 1
prob = pt(1.5, 8)
media_salario = 75
n_amostras = 9
dp = 10
graus_liberdade = n_amostras - 1
prob = pt(1.5, 8)
prob
# p(salario>=80)=?
prob1 = 1 - prob
dim(cars)
head(cars)
cor(cars)
modelo
modelo = lm(speed ~ dist, data=cars) #Linear Model => lm(x,y, data)
modelo
modelo
modelo = lm(speed ~ dist, data=cars) #Linear Model => lm(x,y, data)
modelo
plot(modelo)
modelo
plot(modelo)
predict(modelo, data.frame(dist=22))
modelo = lm(speed ~ dist, data=cars) #Linear Model => lm(x,y, data)
modelo
#plot(modelo)
#plot(speed ~ dist, data=cars)
#abline(modelo)
predict(modelo, data.frame(dist=22))
modelo = lm(speed ~ dist, data=cars) #Linear Model => lm(x,y, data)
modelo
#plot(modelo)
#plot(speed ~ dist, data=cars)
#abline(modelo)
predict(modelo, data.frame(dist=22))
modelo = lm(speed ~ dist, data=cars) #Linear Model => lm(x,y, data)
modelo
#plot(modelo)
#plot(speed ~ dist, data=cars)
#abline(modelo)
predict(modelo, data.frame(dist=22))
summary(modelo)
colnames(mtcars)
dim(mtcars)
cor(mtcars[1:4])
colnames(mtcars)
dim(mtcars)
cor(mtcars[1:4])
modelo = lm(mpg ~ disp, data=mtcars)
modelo
summary(modelo)@r.squared
summary(modelo)$r.squared
summary(modelo)$adj.r.squared
summary(modelo)$adj.r.squared
plot(mpg ~ disp, data=mtcars)
abline(modelo)
predict(modelo, data.frame(disp=200))
plot(mpg ~ disp + hp + cyl, data=mtcars)
cls
clear
plot(mpg ~ disp + hp + cyl, data=mtcars)
predict(modelo, data.frame(disp=200))
modelo_multiplo = lm(mpg ~ disp + hp + cyl, data=mtcars)
summary(modelo_multiplo)$r.squared
summary(modelo_multiplo)$adj.r.squared
predict(modelo, data.frame(disp=200, hp=100, cyl=4))
predict(modelo_multiplo, data.frame(disp=200, hp=100, cyl=4))
fix(eleicao)
eleicao = read.csv(file.choose(), sep=";", header = T)
fix(eleicao)
View(modelo)
plot(eleicao$DESPESAS, eleicao$SITUACAO)
summary(eleicao)
fix(eleicao)
cor(eleicao$DESPESAS, eleicao$SITUACAO)
modelo = glm('SITUACAO ~ DESPESAS', data=eleicao, family = 'binomial')
summary(modelo)
plot(eleicao$DESPESAS, eleicao$SITUACAO, col='red', pch=20)
points(eleicao$DESPESAS, modelo$fitted, pch=4)
prever_eleicao = read.csv(file.choose(), sep=";", header = T)
prever_eleicao$RESULT = predict(modelo, newdata = prever_eleicao, type="response")
fix(prever_eleicao)
dim(cars)
head(cars)
cor(cars)
modelo = lm(speed ~ dist, data=cars) #Linear Model => lm(x,y, data)
modelo
#plot(modelo)
#plot(speed ~ dist, data=cars)
#abline(modelo)
predict(modelo, data.frame(dist=22))
summary(modelo)
X = 15,18,20,25,30,44
X = [15,18,20,25,30,44]
X = []
x = 1
X = [15,18,20,25,30,44]
X = [15,18,20,25,30,44]
X = 15,18,20,25,30,44
X = c(15,18,20,25,30,44)
Y = c(240,255,270,283,300,310)
correlacao = cov(X, Y) / sqrt(var(X) * var(Y))
X = c(15,18,20,25,30,44)
Y = c(240,255,270,283,300,310)
correlacao = cov(X, Y) / sqrt(var(X) * var(Y))
correlacao_form = cor(X, Y)
women
women
modelo = lm(weight ~ height, data=cars)
summary(modelo)
modelo = lm(weight ~ height, data=women)
summary(modelo)
modelo = lm(weight ~ height, data=women)
summary(modelo)
predict(modelo, data.frame(weight=30))
modelo = lm(height ~ weight, data=women)
summary(modelo)
predict(modelo, data.frame(weight=30))
women
modelo = lm(height ~ weight, data=women)
summary(modelo)
predict(modelo, data.frame(weight=30))
dim(cars)
head(cars)
cor(cars)
modelo = lm(speed ~ dist, data=cars) #Linear Model => lm(x,y, data)
modelo
#plot(modelo)
#plot(speed ~ dist, data=cars)
#abline(modelo)
predict(modelo, data.frame(dist=22))
summary(modelo)
dim(cars)
head(cars)
cor(cars)
modelo = lm(dist ~ speed, data=cars) #Linear Model => lm(x,y, data)
modelo
#plot(modelo)
#plot(speed ~ dist, data=cars)
#abline(modelo)
predict(modelo, data.frame(dist=22))
summary(modelo)
base = women
write.csv(base, 'women.csv')
# Poisson
# prob(x=a)
# dpois(x, lambda)
# media = 2
# x = 3
lambda = 2
dpois(3, lambda)
# prob(x<a)
# ppois(x, lambda)
# media = 2
# x <= 3
ppois(3, lambda)
# media = 2
# x > 3
ppois(3, lambda, lower.tail=T)
ppois(3, lambda, lower.tail=F)
novela = matrix(c(19, 6, 43, 32), nrow = 2, byrow = T)
fix(novela)
rownames(novela) = c("Masculino","Feminino")
colnames(novela) = c("Assiste","Não Assiste")
fix(novela)
row.names(novela) = "Gender"
fix(novela)
novela = matrix(c(19, 6, 43, 32), nrow = 2, byrow = T)
rownames(novela) = c("Masculino","Feminino")
colnames(novela) = c("Assiste","Não Assiste")
row.names(novela) = c("Gender")
fix(novela)
novela = matrix(c(19, 6, 43, 32), nrow = 2, byrow = T)
rownames(novela) = c("Masculino","Feminino")
colnames(novela) = c("Assiste","Não Assiste")
fix(novela)
#H0: Não há diferença significativa além do acaso
chisq.test(novela)
fix(tratamento)
tratamento = read.csv(file.choose(), se=";", header=T)
fix(tratamento)
tratamento = read.csv(file.choose(), se=";", header=T)
fix(tratamento)
boxplot(tratamento$Horas ~ tratamento$Remedio)
tratamento = read.csv(file.choose(), se=";", header=T)
fix(tratamento)
boxplot(tratamento$Horas ~ tratamento$Remedio)
# Análise de variância de um fator
an = aov(Horas ~ Remedio, data = tratamento)
summary(an)
an1 = aov(Horas ~ Remedio * Sexo, data = tratamento)
summary(an1)
tutkey_test = TukeyHSD(an1)
tutkey_test
plot(tutkey_test)
tutkey_test = TukeyHSD(an)
tutkey_test
plot(tutkey_test)
boxplot(iris$Sepal.Width)
boxplot.stats(iris$Sepal.Width).out
boxplot.stats(iris$Sepal.Width)$out
install.packages('outliers')
library(outliers)
outlier(iris$Sepal.Width)
outlier(iris$Sepal.Width, opposite = T)
lambda = 10
dpois(12, lambda)
jogo = matrix(c(41,34, 18, 7), nrow = 2, byrow = T)
rownames(jogo) = c("Masculino","Feminino")
colnames(jogo) = c("Joga","Não Joga")
chisq.test(jogo)
install.packages("mongolite")
library("mongolite")
conexao = dbConnect(collection="posts", db="cadastrodb", url="mongodb://localhost")
dados = conexao$find()
dados
library("mongolite")
conexao = mongo(collection="posts", db="cadastrodb", url="mongodb://localhost")
dados = conexao$find()
dados
View(dados)
View(dados)
library("mongolite")
conexao = mongo(collection="posts", db="cadastrodb", url="mongodb://localhost")
dados = conexao$find()
dados
View(dados)
library("mongolite")
conexao = mongo(collection="tweets", db="cadastrodb", url="mongodb://localhost")
dados = conexao$find()
dados
library("mongolite")
conexao = mongo(collection="posts", db="cadastrodb", url="mongodb://localhost")
dados = conexao$find()
dados
library("mongolite")
conexao = mongo(collection="tweets", db="twitterdb", url="mongodb://localhost")
dados = conexao$find()
dados
View(dados)
AirPassengers
start(AirPassengers)
end(AirPassengers)
plot(AirPassengers)
plot(aggregate(AirPassengers))
# Mensal
monthplot(AirPassengers)
# Extrair umna janela de dados
subst = window(AirPassengers, start=c(1960, 1), end=c(1960, 12))
plot(subst)
plot(AirPassengers)
plot(dec)
dec = decompose(AirPassengers)
plot(dec)
install.packages('forecast')
library('forecast')
# order: janela
media_movel = ma(AirPassengers, order=6)
# h: número de previsoes
previsao = forecast(media_movel, h=6)
previsao
plot(previsao)
# h: número de previsoes
previsao = forecast(media_movel, h=12)
previsao = forecast(media_movel, h=12)
previsao
plot(previsao)
media_movel = ma(AirPassengers, order=12)
# h: número de previsoes
previsao = forecast(media_movel, h=12)
previsao
plot(previsao)
media_movel = ma(AirPassengers, order=3)
# h: número de previsoes (meses)
previsao = forecast(media_movel, h=12)
previsao
plot(previsao)
arima_set = auto.arima(AirPassengers)
previsao_arima = forecast(arima_set, h=6)
plot(previsao_arima)
previsao_arima = forecast(arima_set, h=12)
plot(previsao_arima)
media_movel = ma(AirPassengers, order=3)
# h: número de previsoes (meses)
previsao = forecast(media_movel, h=12)
previsao
plot(previsao)
# Medidas de posição
# Definir pasta de trabalho
setwd("C:/Users/Dovahkiin/Documents/machinelearning/dsa/microsoft-powerbi-para-data-science/capitulo-12/")
getwd()
# Carregar Dataset
vendas <- read.csv("Vendas.csv", fileEncoding = "windows-1252")
# Resumo do dataset
View(vendas)
str(vendas)
summary(vendas$Valor)
summary(vendas$Custo)
# Média
?mean
mean(vendas$Valor)
mean(vendas$Custo)
# Media Ponderada
?weighted.mean
weighted.mean(vendas$Valor, w = vendas$Custo)
# Moda
# Criando uma função
moda <- function(v) {
valor_unico <- unique(v)
valor_unico[which.max(tabulate(match(v, valor_unico)))]
}
#Obtendo a Moda
resultado <- moda(vendas$Valor)
print(resultado)
